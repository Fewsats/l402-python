[
  {
    "objectID": "config.html",
    "href": "config.html",
    "title": "L402 Configuration",
    "section": "",
    "text": "_db_path()\n\nPath('/Users/pengren/.config/l402/l402.db')",
    "crumbs": [
      "L402 Configuration"
    ]
  },
  {
    "objectID": "config.html#constants",
    "href": "config.html#constants",
    "title": "L402 Configuration",
    "section": "Constants",
    "text": "Constants",
    "crumbs": [
      "L402 Configuration"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "l402-python",
    "section": "",
    "text": "Install latest from pypi\n$ pip install l402\n\n\n\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "l402-python"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "l402-python",
    "section": "",
    "text": "Install latest from pypi\n$ pip install l402\n\n\n\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "l402-python"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "l402-python",
    "section": "How to use",
    "text": "How to use\n\nPaying with the L402\nThe L402 supports multiple payment providers. In this example we’ll use a coinbase wallet as an onchain provider. This wallet will be used to pay for L402 offers.\n\nfrom l402.payment_clients import Client, CoinbaseProvider\nfrom cdp import Wallet\n\n\n# CDP can be directly used as an onchain provider.\nw = Wallet.create()\n\nc = Client(onchain_provider=CoinbaseProvider(wallet=w))\n\nNext we retrieve an offer from a demo server. This will return a 402 status code and a JSON response with the available offers.\n\nr1 = httpx.get(\"http://localhost:9000/offers\")\nr1.status_code, r1.json()\n\n(402,\n {'offers': [{'amount': 1,\n    'currency': 'USD',\n    'description': 'Purchase 1 credit for API access',\n    'offer_id': '58e1ee0a-e283-4f80-8a41-5c2f0ea138ca',\n    'payment_methods': ['onchain'],\n    'title': '1 Credit Package',\n    'type': 'one-time'}],\n  'payment_context_token': '42f46106-8989-4ed1-a770-adf9ad64c30b',\n  'payment_request_url': 'http://localhost:9000/payment_request',\n  'version': '0.2.2'})\n\n\nTo pay, we just need to provide the L402 response to the client and it will automatically use configured payment provider that matches the payment method.\nif r1.status_code == HTTPStatus.PAYMENT_REQUIRED:\n    ps = c.pay(r1.json())\n\n\nGetting paid with the L402\nThe L402 protocol implements a two-step payment flow:\n\nThe server returns a 402 Payment Required status code and information about the available offers.\nThe client uses the L402 response to fetch the information for a specific payment method.\n\nIn this example, we implement this using a server with two endpoints:\n\n/offers - Returns available payment options with 402 status\n/payment_request - Generates payment details for chosen payment method\n\nfrom l402.payment_providers import PaymentServer, Offer\n\napp = FastAPI()\n\n\nps = PaymentServer(\n    payment_request_url=\"http://localhost:9000/payment_request\",\n    onchain_provider=w,\n)\n\n@app.get(\"/offers\")\ndef offers():\n    offers_list = [Offer(\n        amount=1,\n        currency='USD',\n        description='Purchase 1 credit for API access',\n        offer_id=str(uuid4()),\n        payment_methods=['onchain'],\n        title='1 Credit Package',\n        type='one-time'\n    )]\n    \n    offers_response = ps.create_offers(offers_list)\n    # Return the status code 402 Payment Required with the offers\n    return JSONResponse(content=offers_response.model_dump(), status_code=402)\n\n@app.post(\"/payment_request\")\nasync def create_payment_request(request: PaymentRequest):\n    payment_request = ps.create_payment_request(**request.model_dump())\n    return JSONResponse(content=payment_request)\n\nr = httpx.get(\"http://localhost:9000/offers\")\noffers_data = r.json()\nr.status_code, offers_data\n\n(402,\n {'offers': [{'amount': 1,\n    'currency': 'USD',\n    'description': 'Purchase 1 credit for API access',\n    'offer_id': '1808e12c-1824-49d8-a348-278959f6008d',\n    'payment_methods': ['onchain'],\n    'title': '1 Credit Package',\n    'type': 'one-time'}],\n  'payment_context_token': '82dbf89a-b18f-4737-b350-c58731b1cc18',\n  'payment_request_url': 'http://localhost:9000/payment_request',\n  'version': '0.2.2'})\n\n\nThe client can use this offer to request the information for a payment method. We have to choose the payment method and, in the case of coinbase, the chain and asset.\n\noffers_data = dict2obj(offers_data)\ndata = {\n    \"offer_id\": offers_data.offers[0].offer_id, \n    \"payment_method\": 'onchain',\n    \"chain\": 'base-sepolia', # choose the chain where you want to pay\n    \"asset\": 'usdc', # choose the asset you want to pay\n    \"payment_context_token\": offers_data.payment_context_token \n}\nr = httpx.post(offers_data.payment_request_url, json=data)\nr, r.json()\n\n(&lt;Response [200 OK]&gt;,\n {'expires_at': '2025-01-30T21:03:46.502392+00:00',\n  'offer_id': '1808e12c-1824-49d8-a348-278959f6008d',\n  'payment_request': {'address': '0x6EC717D99534aF3917E25De1024f9e5BcDc1B262',\n   'chain': 'base-sepolia',\n   'asset': 'usdc'},\n  'version': '0.2.2'})",
    "crumbs": [
      "l402-python"
    ]
  },
  {
    "objectID": "utils.html",
    "href": "utils.html",
    "title": "utils",
    "section": "",
    "text": "source\n\n\n\n create_test_wallet (fund=True, chain='base-sepolia')",
    "crumbs": [
      "utils"
    ]
  },
  {
    "objectID": "utils.html#onchain",
    "href": "utils.html#onchain",
    "title": "utils",
    "section": "",
    "text": "source\n\n\n\n create_test_wallet (fund=True, chain='base-sepolia')",
    "crumbs": [
      "utils"
    ]
  },
  {
    "objectID": "utils.html#utilities-to-run-fastapi-in-a-notebook",
    "href": "utils.html#utilities-to-run-fastapi-in-a-notebook",
    "title": "utils",
    "section": "Utilities to run FastAPI in a notebook",
    "text": "Utilities to run FastAPI in a notebook\n\nsource\n\nServerManager\n\n ServerManager (app, port=8000, host='0.0.0.0')\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nwait_port_free\n\n wait_port_free (port, host='localhost', max_wait=3)\n\n\nsource\n\n\nis_port_free\n\n is_port_free (port, host='localhost')\n\n\n# #| export\n\n# def run_l402_server(PRClass, port=9000):\n#     app = FastAPI()\n\n#     server = ServerManager(app, port=port).start()\n\n#     @app.get(\"/offers\")\n#     def offers():\n#         offers_list = [{\n#             \"amount\": 1,\n#             \"currency\": 'USD',\n#             \"description\": 'Purchase 1 credit for API access',\n#             \"offer_id\": 'xxxx',\n#             \"payment_methods\": ['onchain'],\n#             \"title\": '1 Credit Package',\n#             type='one-time'\n#         )]\n\n        \n#         return JSONResponse(\n#             content=offers_response.model_dump(),\n#             status_code=402\n#         )\n\n#     @app.post(\"/payment_request\")\n#     async def create_payment_request(request: PRClass):\n#         payment_request = ps.create_payment_request(**request.model_dump())\n#         return JSONResponse(\n#             content=payment_request,\n#             status_code=200\n#         )",
    "crumbs": [
      "utils"
    ]
  },
  {
    "objectID": "payment_providers.html",
    "href": "payment_providers.html",
    "title": "payment_providers",
    "section": "",
    "text": "source\n\nPaymentRequestRow\n\n PaymentRequestRow (id:int=UNSET, offer_id:str=UNSET,\n                    payment_context_token:str=UNSET,\n                    payment_method:str=UNSET, expires_at:str=UNSET,\n                    payment_request:dict=UNSET, version:str=UNSET,\n                    created_at:str=UNSET)\n\n\nsource\n\n\nOfferRow\n\n OfferRow (offer_id:str=UNSET, amount:int=UNSET, currency:str=UNSET,\n           description:str=UNSET, payment_methods:list[str]=UNSET,\n           title:str=UNSET, type:str=UNSET,\n           payment_context_token:str=UNSET, payment_request_url:str=UNSET,\n           version:str=UNSET, created_at:str=UNSET)\n\n\nsource\n\n\nPaymentServer\n\n PaymentServer\n                (payment_request_url:str='http://localhost:8000/payment_re\n                quest', lightning_provider=None,\n                credit_card_provider=None, onchain_provider=None,\n                onchain_supported_assets=['usdc'])\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npayment_request_url\nstr\nhttp://localhost:8000/payment_request\nendpoint to get payment details for an offer\n\n\nlightning_provider\nNoneType\nNone\nprovider to generate lightning invoices\n\n\ncredit_card_provider\nNoneType\nNone\nprovider to generate credit card payment urls\n\n\nonchain_provider\nNoneType\nNone\nprovider to generate onchain payment addresses\n\n\nonchain_supported_assets\nlist\n[‘usdc’]\nsupported assets for onchain payment\n\n\n\n\nsource\n\n\nL402Response\n\n L402Response (offers:List[__main__.Offer], payment_context_token:str,\n               payment_request_url:str, version:str)\n\n*Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\nsource\n\n\nOffer\n\n Offer (amount:int, currency:str, description:str, offer_id:str,\n        payment_methods:List[str], title:str, type:str)\n\n*Usage docs: https://docs.pydantic.dev/2.10/concepts/models/\nA base class for creating Pydantic models.\nAttributes: class_vars: The names of the class variables defined on the model. private_attributes: Metadata about the private attributes of the model. signature: The synthesized __init__ [Signature][inspect.Signature] of the model.\n__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.\n__pydantic_core_schema__: The core schema of the model.\n__pydantic_custom_init__: Whether the model has a custom `__init__` function.\n__pydantic_decorators__: Metadata containing the decorators defined on the model.\n    This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.\n__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to\n    __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.\n__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.\n__pydantic_post_init__: The name of the post-init method for the model, if defined.\n__pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].\n__pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.\n__pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.\n\n__pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.\n__pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.\n\n__pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]\n    is set to `'allow'`.\n__pydantic_fields_set__: The names of fields explicitly set during instantiation.\n__pydantic_private__: Values of private attributes set on the model instance.*\n\nps = PaymentServer()\n\ntest_offers = [Offer(\n    amount=1,\n    currency='USD',\n    description='Purchase 1 credit for API access',\n    offer_id='offer_c668e0c0',\n    payment_methods=['lightning'],\n    title='1 Credit Package',\n    type='top-up'\n)]\n\nps.create_offers(test_offers)\n\nL402Response(offers=[Offer(amount=1, currency='USD', description='Purchase 1 credit for API access', offer_id='offer_c668e0c0', payment_methods=['lightning'], title='1 Credit Package', type='top-up')], payment_context_token='cb2680f1-2425-41df-9d53-5082e3f15fc1', payment_request_url='http://localhost:8000/payment_request', version='0.2.2')\n\n\n\nsource\n\n\nPaymentServer.create_payment_request\n\n PaymentServer.create_payment_request (offer_id, payment_context_token,\n                                       payment_method, chain='base-\n                                       mainnet', asset='usdc')\n\nCreate a payment request for an offer. Returns a dict with the payment request details.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\noffer_id\n\n\n\n\n\npayment_context_token\n\n\n\n\n\npayment_method\n\n\n\n\n\nchain\nstr\nbase-mainnet\noptional, for onchain payment\n\n\nasset\nstr\nusdc\noptional, for onchain payment",
    "crumbs": [
      "payment_providers"
    ]
  },
  {
    "objectID": "payment_clients.html",
    "href": "payment_clients.html",
    "title": "payment clients",
    "section": "",
    "text": "chain = 'base-mainnet'\nsource",
    "crumbs": [
      "payment clients"
    ]
  },
  {
    "objectID": "payment_clients.html#coinbase-provider",
    "href": "payment_clients.html#coinbase-provider",
    "title": "payment clients",
    "section": "Coinbase Provider",
    "text": "Coinbase Provider\n\nsource\n\nCoinbaseProvider\n\n CoinbaseProvider (wallet:cdp.wallet.Wallet, asset:str='usdc')\n\nBase class for objects needing a basic __repr__\n\nc = CoinbaseProvider(wallet=create_test_wallet(fund=False, chain=chain))\nc\n\nCoinbaseProvider(wallet=Wallet: (id: ef60974b-2571-44ca-ac25-ff99d2e3c88f, network_id: base-mainnet, server_signer_status: None), asset='usdc', supported_methods=['onchain'], chain='base-mainnet')\n\n\n\nr = httpx.get('https://l402-offers.replit.app')\n# r = httpx.get('http://localhost:9000/offers')\nr.status_code, r.text\n\n(402,\n '{\"offers\":[{\"offer_id\":\"ce23eefd-1156-4aa4-85c1-361918a24485\",\"amount\":1,\"currency\":\"USD\",\"description\":\"Purchase 1 credit for API access\",\"title\":\"1 Credit Package\",\"type\":\"one-time\",\"payment_methods\":[\"onchain\",\"lightning\"]}],\"payment_context_token\":\"8ee0082b-97c8-4ac6-baa4-f9f544dc977c\",\"payment_request_url\":\"https://hub-5n97k.ondigitalocean.app/v0/l402/payment-request\",\"version\":\"0.2.2\"}')\n\n\n\no = r.json()\no\n\n{'offers': [{'offer_id': 'ce23eefd-1156-4aa4-85c1-361918a24485',\n   'amount': 1,\n   'currency': 'USD',\n   'description': 'Purchase 1 credit for API access',\n   'title': '1 Credit Package',\n   'type': 'one-time',\n   'payment_methods': ['onchain', 'lightning']}],\n 'payment_context_token': '8ee0082b-97c8-4ac6-baa4-f9f544dc977c',\n 'payment_request_url': 'https://hub-5n97k.ondigitalocean.app/v0/l402/payment-request',\n 'version': '0.2.2'}\n\n\n\ndata = {\n    \"offer_id\": first(o['offers'])['offer_id'],\n    \"payment_method\": 'onchain',\n    \"chain\": chain,\n    \"asset\": 'usdc',\n    \"payment_context_token\": o['payment_context_token']\n    }\nr = httpx.post(o['payment_request_url'], json=data)\nr.status_code, r.json()\n\n(200,\n {'expires_at': '2025-01-28T02:06:17.637705+00:00',\n  'offer_id': 'ce23eefd-1156-4aa4-85c1-361918a24485',\n  'payment_request': {'checkout_url': 'https://commerce.coinbase.com/pay/be427ef1-153a-495e-93eb-1b10550731d0',\n   'address': '0x03059433BCdB6144624cC2443159D9445C32b7a8',\n   'chain': 'base-mainnet',\n   'asset': 'usdc'},\n  'version': '0.2.2'})\n\n\n\ndata = {\n    \"offer_id\": first(o['offers'])['offer_id'],\n    \"payment_method\": 'lightning',\n    \"payment_context_token\": o['payment_context_token']\n    }\nr = httpx.post(o['payment_request_url'], json=data, timeout=15)\nr.status_code, r.text\n\n(200,\n '{\"expires_at\": \"2025-01-28T04:14:16.328280+00:00\", \"offer_id\": \"ce23eefd-1156-4aa4-85c1-361918a24485\", \"payment_request\": {\"lightning_invoice\": \"lnbc90n1pnes5txpp5zxhg46zr2lycmqg9km930h9mmefeyanw3jm8c2cxpqxlhlvevkgsdq6xysyxun9v35hggzsv93kkct8v5cqzpgxqrzpjrzjqwghf7zxvfkxq5a6sr65g0gdkv768p83mhsnt0msszapamzx2qvuxqqqqz99gpz55yqqqqqqqqqqqqqq9qrzjq25carzepgd4vqsyn44jrk85ezrpju92xyrk9apw4cdjh6yrwt5jgqqqqz99gpz55yqqqqqqqqqqqqqq9qsp5y9unj8j6czfjy274dj7war7k7xey8jvgegsxcjenct8ntah4eyvs9qxpqysgqq60qg26s74k4jsetcz954dlpghg63a8qrprqytr0ml0f2hxtfm0zujk4t54x2n4hxaxaz6d75tm7xjalv287mn559uq8tnmyfs92gdqpdutj9l\"}, \"version\": \"0.2.2\"}')\n\n\n\ndata = {\n    \"offer_id\": 'test-lightning-1',\n    \"payment_method\": 'lightning',\n    \"payment_context_token\": '550cdc77-bdae-410b-bd7a-091b14be72bb'\n    }\nr = httpx.post('http://localhost:8000/v0/l402/payment-request', json=data, timeout=15)\nr.status_code, r.text\n\n(200,\n '{\"expires_at\": \"2025-01-28T02:46:35.422815+00:00\", \"offer_id\": \"test-lightning-1\", \"payment_request\": {\"lightning_invoice\": \"lnbc90n1pnes0xhpp5lsp46vm2j47f8z3rm3lmj2lh54gvc4jn3hql0qhp9ryxef9fz0lsdpy23jhxapqf35kw6r5de5kueeq2pshjmt9de6qcqzpgxqrzpnrzjqwghf7zxvfkxq5a6sr65g0gdkv768p83mhsnt0msszapamzx2qvuxqqqqz99gpz55yqqqqqqqqqqqqqq9qrzjq25carzepgd4vqsyn44jrk85ezrpju92xyrk9apw4cdjh6yrwt5jgqqqqz99gpz55yqqqqqqqqqqqqqq9qsp5ykrsqs0x9mjt22937a0hn5wz0z0fxd9yxv97sud2kkrswuakh2js9qxpqysgqeq8g08w8n3t0wlhj3h3zkjsnpa8gznzncf98nqk92lyd96a30gsy8fxzk5q9z47fsy59ljn548xlck84qeta88wygppq3zed8qsz9dgqxn7rtq\"}, \"version\": \"0.2.2\"}')\n\n\n\nsource\n\n\nget_payment_request\n\n get_payment_request (payment_request_url:str, payment_context_token:str,\n                      offer_id:str, payment_method:str, chain:str='',\n                      asset:str='')\n\n\nr = get_payment_request(o['payment_request_url'], o['payment_context_token'], o['offers'][0]['offer_id'], 'onchain', chain, 'usdc')\nr\n\n\n---------------------------------------------------------------------------\nReadTimeout                               Traceback (most recent call last)\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpx/_transports/default.py:101, in map_httpcore_exceptions()\n    100 try:\n--&gt; 101     yield\n    102 except Exception as exc:\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpx/_transports/default.py:250, in HTTPTransport.handle_request(self, request)\n    249 with map_httpcore_exceptions():\n--&gt; 250     resp = self._pool.handle_request(req)\n    252 assert isinstance(resp.stream, typing.Iterable)\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpcore/_sync/connection_pool.py:256, in ConnectionPool.handle_request(self, request)\n    255     self._close_connections(closing)\n--&gt; 256     raise exc from None\n    258 # Return the response. Note that in this case we still have to manage\n    259 # the point at which the response is closed.\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpcore/_sync/connection_pool.py:236, in ConnectionPool.handle_request(self, request)\n    234 try:\n    235     # Send the request on the assigned connection.\n--&gt; 236     response = connection.handle_request(\n    237         pool_request.request\n    238     )\n    239 except ConnectionNotAvailable:\n    240     # In some cases a connection may initially be available to\n    241     # handle a request, but then become unavailable.\n    242     #\n    243     # In this case we clear the connection and try again.\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpcore/_sync/connection.py:103, in HTTPConnection.handle_request(self, request)\n    101     raise exc\n--&gt; 103 return self._connection.handle_request(request)\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpcore/_sync/http11.py:136, in HTTP11Connection.handle_request(self, request)\n    135         self._response_closed()\n--&gt; 136 raise exc\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpcore/_sync/http11.py:106, in HTTP11Connection.handle_request(self, request)\n     97 with Trace(\n     98     \"receive_response_headers\", logger, request, kwargs\n     99 ) as trace:\n    100     (\n    101         http_version,\n    102         status,\n    103         reason_phrase,\n    104         headers,\n    105         trailing_data,\n--&gt; 106     ) = self._receive_response_headers(**kwargs)\n    107     trace.return_value = (\n    108         http_version,\n    109         status,\n    110         reason_phrase,\n    111         headers,\n    112     )\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpcore/_sync/http11.py:177, in HTTP11Connection._receive_response_headers(self, request)\n    176 while True:\n--&gt; 177     event = self._receive_event(timeout=timeout)\n    178     if isinstance(event, h11.Response):\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpcore/_sync/http11.py:217, in HTTP11Connection._receive_event(self, timeout)\n    216 if event is h11.NEED_DATA:\n--&gt; 217     data = self._network_stream.read(\n    218         self.READ_NUM_BYTES, timeout=timeout\n    219     )\n    221     # If we feed this case through h11 we'll raise an exception like:\n    222     #\n    223     #     httpcore.RemoteProtocolError: can't handle event type\n   (...)\n    227     # perspective. Instead we handle this case distinctly and treat\n    228     # it as a ConnectError.\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpcore/_backends/sync.py:126, in SyncStream.read(self, max_bytes, timeout)\n    125 exc_map: ExceptionMapping = {socket.timeout: ReadTimeout, OSError: ReadError}\n--&gt; 126 with map_exceptions(exc_map):\n    127     self._sock.settimeout(timeout)\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:158, in _GeneratorContextManager.__exit__(self, typ, value, traceback)\n    157 try:\n--&gt; 158     self.gen.throw(value)\n    159 except StopIteration as exc:\n    160     # Suppress StopIteration *unless* it's the same exception that\n    161     # was passed to throw().  This prevents a StopIteration\n    162     # raised inside the \"with\" statement from being suppressed.\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpcore/_exceptions.py:14, in map_exceptions(map)\n     13     if isinstance(exc, from_exc):\n---&gt; 14         raise to_exc(exc) from exc\n     15 raise\n\nReadTimeout: The read operation timed out\n\nThe above exception was the direct cause of the following exception:\n\nReadTimeout                               Traceback (most recent call last)\nCell In[13], line 1\n----&gt; 1 r = get_payment_request(o['payment_request_url'], o['payment_context_token'], o['offers'][0]['offer_id'], 'onchain', chain, 'usdc')\n      2 r\n\nCell In[12], line 16, in get_payment_request(payment_request_url, payment_context_token, offer_id, payment_method, chain, asset)\n      3 def get_payment_request(payment_request_url: str,\n      4                         payment_context_token: str,\n      5                         offer_id: str, \n      6                         payment_method: str, \n      7                         chain: str = \"\", \n      8                         asset: str = \"\"):\n      9     data = {\n     10         \"offer_id\": offer_id,\n     11         \"payment_method\": payment_method,\n   (...)\n     14         \"payment_context_token\": payment_context_token\n     15     }\n---&gt; 16     r = httpx.post(payment_request_url, json=data)\n     17     r.raise_for_status()\n     18     return r.json()\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpx/_api.py:304, in post(url, content, data, files, json, params, headers, cookies, auth, proxy, follow_redirects, verify, timeout, trust_env)\n    282 def post(\n    283     url: URL | str,\n    284     *,\n   (...)\n    297     trust_env: bool = True,\n    298 ) -&gt; Response:\n    299     \"\"\"\n    300     Sends a `POST` request.\n    301 \n    302     **Parameters**: See `httpx.request`.\n    303     \"\"\"\n--&gt; 304     return request(\n    305         \"POST\",\n    306         url,\n    307         content=content,\n    308         data=data,\n    309         files=files,\n    310         json=json,\n    311         params=params,\n    312         headers=headers,\n    313         cookies=cookies,\n    314         auth=auth,\n    315         proxy=proxy,\n    316         follow_redirects=follow_redirects,\n    317         verify=verify,\n    318         timeout=timeout,\n    319         trust_env=trust_env,\n    320     )\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpx/_api.py:109, in request(method, url, params, content, data, files, json, headers, cookies, auth, proxy, timeout, follow_redirects, verify, trust_env)\n     57 \"\"\"\n     58 Sends an HTTP request.\n     59 \n   (...)\n    100 ```\n    101 \"\"\"\n    102 with Client(\n    103     cookies=cookies,\n    104     proxy=proxy,\n   (...)\n    107     trust_env=trust_env,\n    108 ) as client:\n--&gt; 109     return client.request(\n    110         method=method,\n    111         url=url,\n    112         content=content,\n    113         data=data,\n    114         files=files,\n    115         json=json,\n    116         params=params,\n    117         headers=headers,\n    118         auth=auth,\n    119         follow_redirects=follow_redirects,\n    120     )\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpx/_client.py:825, in Client.request(self, method, url, content, data, files, json, params, headers, cookies, auth, follow_redirects, timeout, extensions)\n    810     warnings.warn(message, DeprecationWarning, stacklevel=2)\n    812 request = self.build_request(\n    813     method=method,\n    814     url=url,\n   (...)\n    823     extensions=extensions,\n    824 )\n--&gt; 825 return self.send(request, auth=auth, follow_redirects=follow_redirects)\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpx/_client.py:914, in Client.send(self, request, stream, auth, follow_redirects)\n    910 self._set_timeout(request)\n    912 auth = self._build_request_auth(request, auth)\n--&gt; 914 response = self._send_handling_auth(\n    915     request,\n    916     auth=auth,\n    917     follow_redirects=follow_redirects,\n    918     history=[],\n    919 )\n    920 try:\n    921     if not stream:\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpx/_client.py:942, in Client._send_handling_auth(self, request, auth, follow_redirects, history)\n    939 request = next(auth_flow)\n    941 while True:\n--&gt; 942     response = self._send_handling_redirects(\n    943         request,\n    944         follow_redirects=follow_redirects,\n    945         history=history,\n    946     )\n    947     try:\n    948         try:\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpx/_client.py:979, in Client._send_handling_redirects(self, request, follow_redirects, history)\n    976 for hook in self._event_hooks[\"request\"]:\n    977     hook(request)\n--&gt; 979 response = self._send_single_request(request)\n    980 try:\n    981     for hook in self._event_hooks[\"response\"]:\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpx/_client.py:1014, in Client._send_single_request(self, request)\n   1009     raise RuntimeError(\n   1010         \"Attempted to send an async request with a sync Client instance.\"\n   1011     )\n   1013 with request_context(request=request):\n-&gt; 1014     response = transport.handle_request(request)\n   1016 assert isinstance(response.stream, SyncByteStream)\n   1018 response.request = request\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpx/_transports/default.py:249, in HTTPTransport.handle_request(self, request)\n    235 import httpcore\n    237 req = httpcore.Request(\n    238     method=request.method,\n    239     url=httpcore.URL(\n   (...)\n    247     extensions=request.extensions,\n    248 )\n--&gt; 249 with map_httpcore_exceptions():\n    250     resp = self._pool.handle_request(req)\n    252 assert isinstance(resp.stream, typing.Iterable)\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/contextlib.py:158, in _GeneratorContextManager.__exit__(self, typ, value, traceback)\n    156     value = typ()\n    157 try:\n--&gt; 158     self.gen.throw(value)\n    159 except StopIteration as exc:\n    160     # Suppress StopIteration *unless* it's the same exception that\n    161     # was passed to throw().  This prevents a StopIteration\n    162     # raised inside the \"with\" statement from being suppressed.\n    163     return exc is not value\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpx/_transports/default.py:118, in map_httpcore_exceptions()\n    115     raise\n    117 message = str(exc)\n--&gt; 118 raise mapped_exc(message) from exc\n\nReadTimeout: The read operation timed out\n\n\n\n\nr = get_payment_request(o['payment_request_url'], o['payment_context_token'], o['offers'][0]['offer_id'], 'lightning')\nr\n\n\n---------------------------------------------------------------------------\nHTTPStatusError                           Traceback (most recent call last)\nCell In[13], line 1\n----&gt; 1 r = get_payment_request(o['payment_request_url'], o['payment_context_token'], o['offers'][0]['offer_id'], 'lightning')\n      2 r\n\nCell In[11], line 17, in get_payment_request(payment_request_url, payment_context_token, offer_id, payment_method, chain, asset)\n      9 data = {\n     10     \"offer_id\": offer_id,\n     11     \"payment_method\": payment_method,\n   (...)\n     14     \"payment_context_token\": payment_context_token\n     15 }\n     16 r = httpx.post(payment_request_url, json=data)\n---&gt; 17 r.raise_for_status()\n     18 return r.json()\n\nFile ~/go/github.com/Fewsats/l402-python/venv/lib/python3.12/site-packages/httpx/_models.py:829, in Response.raise_for_status(self)\n    827 error_type = error_types.get(status_class, \"Invalid status code\")\n    828 message = message.format(self, error_type=error_type)\n--&gt; 829 raise HTTPStatusError(message, request=request, response=self)\n\nHTTPStatusError: Server error '500 Internal Server Error' for url 'https://hub-5n97k.ondigitalocean.app/v0/l402/payment-request'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500\n\n\n\n\nsource\n\n\nClient\n\n Client (lightning_provider=None, credit_card_provider=None,\n         onchain_provider=None, fewsats_provider=None)\n\nBase class for objects needing a basic __repr__\n\nw = create_test_wallet(fund=False, chain=chain)\nc = Client(onchain_provider=CoinbaseProvider(wallet=w, asset='usdc'))\ntry:\n    c.pay(o)\nexcept Exception as e:\n    print(e)\n\nInsufficient funds: have 0, need 1.",
    "crumbs": [
      "payment clients"
    ]
  },
  {
    "objectID": "payment_clients.html#fewsats-client",
    "href": "payment_clients.html#fewsats-client",
    "title": "payment clients",
    "section": "Fewsats Client",
    "text": "Fewsats Client\n\nsource\n\nFewsats\n\n Fewsats (api_key:str=None,\n          base_url:str='https://hub-5n97k.ondigitalocean.app')\n\nInitialize self. See help(type(self)) for accurate signature.\n\nf = Fewsats()\nf = Fewsats(base_url='http://localhost:8000', api_key='yQbJPudW-nqiTyx880t8G83oLGyoR-RlnrLDmEe0D58')\nf.get_payment_methods()\n\n[{'id': 1,\n  'last4': '4242',\n  'brand': 'visa',\n  'exp_month': 12,\n  'exp_year': 2034,\n  'is_default': False},\n {'id': 4,\n  'last4': '4242',\n  'brand': 'Visa',\n  'exp_month': 12,\n  'exp_year': 2034,\n  'is_default': True}]\n\n\n\nc = Client(fewsats_provider=Fewsats(base_url='http://localhost:8000', api_key='yQbJPudW-nqiTyx880t8G83oLGyoR-RlnrLDmEe0D58'))\nerr = None\ntry:\n    c.pay(o)\nexcept Exception as e:\n    print(e.response.text)\n\n{'payment_request_url': 'https://hub-5n97k.ondigitalocean.app/v0/l402/payment-request', 'payment_context_token': 'a1700b1a-8325-47a9-902a-f90e82d21427', 'payment_method': 'onchain', 'offer': {'offer_id': 'f52bcccd-1057-4204-b1ae-01707bfe29af', 'amount': 1, 'currency': 'USD', 'description': 'Purchase 1 credit for API access', 'title': '1 Credit Package', 'type': 'one-time', 'payment_methods': ['onchain']}}\nhttp://localhost:8000\nyQbJPudW-nqiTyx880t8G83oLGyoR-RlnrLDmEe0D58\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/site-packages/ninja/operation.py\", line 341, in run\n    result = await self.view_func(request, **values)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hub_api/l402/api/common/decorators.py\", line 17, in wrapper\n    return await func(request, *args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hub_api/l402/api/v0/views.py\", line 32, in l402_create_purchase_from_offer_v0\n    return await purchase_from_offer(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/asgiref/sync.py\", line 518, in thread_handler\n    raise exc_info[1]\n  File \"/opt/hub_api/common/decorators/aatomic.py\", line 48, in wrapper\n    return await fun(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hub_api/l402/workflow.py\", line 424, in purchase_from_offer\n    return await purchase_with_onchain(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/asgiref/sync.py\", line 518, in thread_handler\n    raise exc_info[1]\n  File \"/opt/hub_api/common/decorators/aatomic.py\", line 48, in wrapper\n    return await fun(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hub_api/l402/workflow.py\", line 496, in purchase_with_onchain\n    transfer = wallet.transfer(\n               ^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/cdp/wallet.py\", line 466, in transfer\n    return self.default_address.transfer(amount, asset_id, destination, gasless, skip_batching)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/cdp/wallet_address.py\", line 122, in transfer\n    self._ensure_sufficient_balance(normalized_amount, asset_id)\n  File \"/usr/local/lib/python3.12/site-packages/cdp/wallet_address.py\", line 463, in _ensure_sufficient_balance\n    raise InsufficientFundsError(expected=amount, exact=current_balance)\ncdp.errors.InsufficientFundsError: Insufficient funds: have 0.499997, need 1.\n\n\n\n\nerr.response.json()\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[18], line 1\n----&gt; 1 err.response.json()\n\nAttributeError: 'NoneType' object has no attribute 'response'\n\n\n\n\ntry:\n    f.pay(o)\nexcept Exception as e:\n    print(e)\n\nname 'f' is not defined\n\n\n\nf = Fewsats()\ntry:\n    f._pay_onchain(address=r['payment_request']['address'], amount=\"0.000001\", chain='base-mainnet', asset='usdc')\nexcept Exception as e:\n    print(e)\n\n{'address': '0x114113186ca748Ea629A08B762df34a93f4C7e64', 'amount': '0.000001', 'chain': 'base-mainnet', 'asset': 'usdc'}\nThe read operation timed out\n\n\n\no, r\n\n({'offers': [{'amount': 1,\n    'currency': 'USD',\n    'description': 'Purchase 1 credit for API access',\n    'offer_id': '33d08b4a-1589-4519-a24f-ba67e2166f0b',\n    'payment_methods': ['onchain'],\n    'title': '1 Credit Package',\n    'type': 'one-time'}],\n  'payment_context_token': 'd5607f07-3ecd-4f84-a9f9-74db7f922760',\n  'payment_request_url': 'http://localhost:9000/payment_request',\n  'version': '0.2.2'},\n {'expires_at': '2025-01-25T18:21:42.339161+00:00',\n  'offer_id': '33d08b4a-1589-4519-a24f-ba67e2166f0b',\n  'payment_request': {'address': '0xAa4b26Ca04692E6cAA310Dc05Feaf1dE75943d62',\n   'chain': 'base-mainnet',\n   'asset': 'usdc'},\n  'version': '0.2.2'})",
    "crumbs": [
      "payment clients"
    ]
  }
]